name: Reusable workflow to build and publish image to acr

on:
  workflow_call:
    secrets:
      github-token:
        required: true
      acr-username:
        required: true
      acr-password:
        required: true
      flow-jfrog-username:
        required: true
      flow-jfrog-token:
        required: true
      azure-creds:
        required: true
      kosli-token:
        required: true
    inputs:
      version:
        description: 'Version of the image to build'
        required: true
        type: string
      image-name:
        type: string
        description: 'Name of the published image (with version)'
        required: true
      kosli-environment:
        type: string
        required: false
        default: 'stacc-acr-registry'
      acr-server:
        type: string
        required: false
        default: 'stacc.azurecr.io'
      kosli-pipeline:
        type: string
        required: false
        description: "Will fallback to image-name if not set"
        default: ''
      docker-file-context:
        type: string
        required: false
        default: '.'
      docker-file:
        type: string
        required: false
      artifact-download-path:
        type: string
        required: false
    outputs:
      version:
        value: ${{ jobs.publish.outputs.version }}
        description: "Outputs new version"
      digest:
        value: ${{ jobs.publish.outputs.digest }}
        description: "Outputs new digest"
      sha256:
        value: ${{ jobs.publish.outputs.sha256 }}
        description: "Outputs new sha256"
      image:
        value: ${{ jobs.publish.outputs.image }}
        description: "Outputs new image"
      name:
        value: ${{ jobs.publish.outputs.name }}
        description: "Outputs new name"
      pipeline:
        value: ${{ jobs.publish.outputs.pipeline }}
        description: "Outputs name of pipeline"

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Set pipeline
        id: set-pipeline
        run: |
          echo "pipeline=${{ inputs.kosli-pipeline || inputs.image-name }}" >> $GITHUB_OUTPUT
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: stacc/github-workflow-actions/actions/setup-kosli@main
        with:
          kosli-pipeline: ${{ inputs.kosli-pipeline }}
          kosli-token: ${{ secrets.kosli-token }}
      - uses: docker/metadata-action@v4
        id: meta
        with:
          tags: | 
            type=semver,pattern={{version}},value=${{inputs.version}}
            type=sha,format=long
          images: ${{ inputs.acr-server}}/${{ inputs.image-name }}
      - name: JFrog Login (needed for Flow builder)
        uses: azure/docker-login@v1
        with:
          login-server: stacc-docker.jfrog.io
          username: ${{ secrets.flow-jfrog-username }}
          password: ${{ secrets.flow-jfrog-token }}
      - name: Docker Login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ inputs.acr-server }}
          username: ${{ secrets.acr-username }}
          password: ${{ secrets.acr-password }}
      - name: Download optional files
        if: inputs.artifact-download-path != ''
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifact-download-path }}
      - name: Read working dir
        if: inputs.artifact-download-path != ''
        run: |
          ls -la
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: ${{ inputs.docker-file-context }}
          file: ${{inputs.docker-file}}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Make the image digest available
        id: digest-prep
        #Might need "" around the sets
        run: |
          ARTIFACT_SHA=$( echo ${{ steps.docker_build.outputs.digest }} | sed 's/.*://')
          echo "DIGEST=$ARTIFACT_SHA" >> ${GITHUB_ENV}
          echo "image-digest=${ARTIFACT_SHA}" >> $GITHUB_OUTPUT
          echo "image=${{ inputs.acr-server }}/${{ inputs.image-name }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT
          echo "name=${{ inputs.acr-server }}/${{ inputs.image-name }}" >> $GITHUB_OUTPUT
      - name: Report Docker image in Kosli
        run: |
          kosli pipeline artifact report creation ${{ steps.digest-prep.outputs.name }} --sha256 ${{ env.DIGEST }}

    outputs:
      version: ${{ steps.meta.outputs.version }}
      digest: ${{ steps.docker_build.outputs.digest }}
      sha256: ${{ env.DIGEST }}
      image: ${{ steps.digest-prep.outputs.image }}
      name: ${{ steps.digest-prep.outputs.name }}
      pipeline: ${{ steps.set-pipeline.outputs.pipeline }}

