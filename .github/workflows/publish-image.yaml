name: Build and publish artifact to container registry
on:
  workflow_call:
    secrets:
      github-token:
        required: true
      acr-username:
        required: true
      acr-password:
        required: true
      flow-jfrog-username:
        required: true
      flow-jfrog-token:
        required: true
      azure-creds:
        required: true
      kosli-token:
        required: true
      snyk-token:
        required: true
    inputs:
      version:
        description: 'Version of the artifact'
        required: true
        type: string
      image-name:
        description: 'Image name without acr and version (e.g. "services-sms")'
        required: true
        type: string
      pull-request-commit:
        description: 'Use this if you want to override defaults and use a specific commit'
        required: false
        type: string
      helm-repo:
        description: 'Helm repo to publish to'
        required: false
        type: string
        default: 'stacc'
      helm-context:
        description: 'Where can we find the helm chart?'
        required: false
        default: 'helm'
        type: string
      should-helm-push:
        description: 'Should we push to helm?'
        required: false
        default: true
        type: boolean
      kosli-pipeline:
        description: 'Name of the Kosli pipeline'
        required: true
        type: string
      junit-artifact-name:
        description: 'Name of artifact containing JUnit test results'
        required: false
        type: string
      artifact-download-path:
        description: 'Path to download additional artifact for build process. Will be placed on root (tbd)'
        required: false
        type: string
      snyk-org:
        description: 'Snyk organization. NOTE: Snyk calls a "team" an organization'
        required: true
        type: string
      snyk-test-additional-params:
        type: string
        description: 'Additional parameters to pass to Snyk test'
        required: false
        default: ''
      snyk-working-directory:
        type: string
        description: 'Where to run Snyk test'
        required: false
        default: '.'
      latest-branch:
        description: 'Branch with last reported version. This gets pushed to by the workflow'
        required: false
        default: 'latest'
        type: string
      docker-file-context:
        description: 'Context for docker build'
        required: false
        default: '.'
        type: string
      docker-file:
        description: 'Path to the Dockerfile. Default {docker-file-context}/Dockerfile'
        type: string
        required: false
    outputs:
      version:
        value: ${{ jobs.publish.outputs.version }}
        description: "Outputs new version"
      digest:
        value: ${{ jobs.publish.outputs.digest }}
        description: "Outputs new digest"
      sha256:
        value: ${{ jobs.publish.outputs.sha256 }}
        description: "Outputs new sha256"
      image:
        value: ${{ jobs.publish.outputs.image }}
        description: "Outputs new image"
      name:
        value: ${{ jobs.publish.outputs.name }}
        description: "Outputs new name"

jobs:
  publish:
    uses: stacc/github-workflow-actions/.github/workflows/reusable_publish.yaml@main
    with:
      version: ${{ inputs.version }}
      image-name: ${{ inputs.image-name }}
      kosli-pipeline: ${{ inputs.kosli-pipeline }}
      docker-file-context: ${{ inputs.docker-file-context }}
      docker-file: ${{ inputs.docker-file }}
      artifact-download-path: ${{ inputs.artifact-download-path }}
    secrets:
      acr-username: ${{ secrets.acr-username }}
      acr-password: ${{ secrets.acr-password }}
      azure-creds: ${{ secrets.azure-creds }}
      kosli-token: ${{ secrets.kosli-token }}
      github-token: ${{ secrets.github-token }}
      flow-jfrog-username: ${{ secrets.flow-jfrog-username }}
      flow-jfrog-token: ${{ secrets.flow-jfrog-token }}
  helm:
    needs: publish
    if: ${{ inputs.should-helm-push }}
    uses: stacc/github-workflow-actions/.github/workflows/reusable_helm.yaml@main
    secrets:
      github-token: ${{ secrets.github-token }}
      azure-creds: ${{ secrets.azure-creds }}
    with:
      context: ${{ inputs.helm-context }}
      helm-repo: ${{ inputs.helm-repo }}
      version: ${{ inputs.version }}
      image-name: ${{ inputs.image-name }}
  pull-request:
    needs: publish
    uses: stacc/github-workflow-actions/.github/workflows/reusable_report-pull-request.yaml@main
    with:
      name: ${{ needs.publish.outputs.name }}
      sha256: ${{ needs.publish.outputs.sha256 }}
      pull-request-commit: ${{ inputs.pull-request-commit || github.sha }}
      kosli-pipeline: ${{ inputs.kosli-pipeline }}
    secrets:
      github-token: ${{ secrets.github-token }}
      kosli-token: ${{ secrets.kosli-token }}
  test:
    needs: publish
    if: inputs.junit-artifact-name != ''
    uses: stacc/github-workflow-actions/.github/workflows/reusable_report-junit.yaml@main
    with:
      name: ${{ needs.publish.outputs.name }}
      sha256: ${{ needs.publish.outputs.sha256 }}
      junit-artifact-name: ${{ inputs.junit-artifact-name }}
      kosli-pipeline: ${{ inputs.kosli-pipeline }}
    secrets:
      kosli-token: ${{ secrets.kosli-token }}
  snyk:
    needs: publish
    uses: stacc/github-workflow-actions/.github/workflows/reusable_report-snyk.yaml@main
    with:
      name: ${{ needs.publish.outputs.name }}
      sha256: ${{ needs.publish.outputs.sha256 }}
      kosli-pipeline: ${{ inputs.kosli-pipeline }}
      snyk-org: ${{ inputs.snyk-org }}
      snyk-working-directory: ${{ inputs.snyk-working-directory }}
      snyk-test-additional-params: ${{ inputs.snyk-test-additional-params }}
    secrets:
      kosli-token: ${{ secrets.kosli-token }}
      acr-username: ${{ secrets.acr-username }}
      acr-password: ${{ secrets.acr-password }}
      snyk-token: ${{ secrets.snyk-token }}
#  request-approval:
#    needs: [publish, pull-request, snyk]
#    if: always()
#    uses: stacc/github-workflow-actions/.github/workflows/reusable_request-approval.yaml@main
#    with:
#      name: ${{ needs.publish.outputs.name }}
#      sha256: ${{ needs.publish.outputs.sha256 }}
#      kosli-pipeline: ${{ inputs.kosli-pipeline }}
#      latest-branch: ${{ inputs.latest-branch }}
#    secrets:
#      github-token: ${{ secrets.github-token }}
#      kosli-token: ${{ secrets.kosli-token }}
