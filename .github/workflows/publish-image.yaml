name: Build and publish artifact to container registry
on:
  workflow_call:
    inputs:
      version:
        description: 'Version of the artifact'
        required: true
        type: string
      image-name:
        description: 'Image name without acr and version (e.g. "services-sms")'
        required: true
        type: string
      kosli-declare:
        description: 'Declare Kosli pipeline'
        required: false
        default: 'pull-request,artifact,test,container-security-scan,code-security-scan'
        type: string
      kosli-environment:
        description: 'Name of the Kosli environment'
        required: false
        default: 'stacc-acr-registry'
        type: string
      kosli-environment-type:
        description: 'Name of the Kosli environment-type'
        required: false
        default: 'server'
        type: string
      junit-artifact-name:
        description: 'Name of artifact containing JUnit test results'
        required: false
        type: string
      snyk-org:
        description: 'Snyk organization. NOTE: Snyk calls a "team" an organization'
        required: true
        type: string
      latest-branch:
        description: 'Branch with last reported version. This gets pushed to by the workflow'
        required: false
        default: 'latest'
        type: string
    outputs:
      version: ${{ jobs.publish.outputs.version }}
      digest: ${{ jobs.publish.outputs.digest }}
      sha256: ${{ jobs.publish.outputs.sha256 }}
      image: ${{ jobs.publish.outputs.image }} # output new artifact path with version
      name: ${{ jobs.publish.outputs.name }} # output new artifact "path" (no version)

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Validate kosli-declare
        run: |
          echo "Validating ${{ inputs.kosli-declare }}"
      - name: Cancel if no Pull Request or test
        if: contains(inputs.kosli-declare, 'pull-request') == 'false'
        run: |
          ::debug::Kosli declare does not contain pull-request. This is required
          ::set-failed
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Validate latest branch exists
        run: |
          (git show-branch ${{inputs.latest-branch}} &>/dev/null) && (git checkout ${{inputs.latest-branch}}) || (git checkout -b ${{inputs.latest-branch}})
  initialize:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: stacc/github-workflow-actions/actions/setup-kosli@main
        with:
          kosli-pipeline: ${{ inputs.kosli-pipeline }}
      - name: Declare Kosli pipeline
        run: kosli pipeline declare --template ${{inputs.kosli-declare}}
      - name: Create environment in Kosli
        run: kosli environment declare --name ${{ inputs.kosli-environment }} --environment-type ${{ inputs.kosli-environment-type }}
  publish:
    needs: initialize
    uses: stacc/github-workflow-actions/.github/workflows/reusable_publish.yaml@main
    with:
      version: ${{ inputs.version }}
      image-name: ${{ inputs.image-name }}
      kosli-pipeline: ${{ inputs.kosli-pipeline }}

  pull-request:
    needs: publish
    uses: stacc/github-workflow-actions/.github/workflows/reusable_report-pull-request.yaml@main
    with:
      name: ${{ steps.publish.outputs.name }}
      sha256: ${{ steps.publish.outputs.sha256 }}
      kosli-pipeline: ${{ inputs.kosli-pipeline }}
  test:
    needs: publish
    uses: stacc/github-workflow-actions/.github/workflows/reusable_report-junit.yaml@main
    with:
      name: ${{ steps.publish.outputs.name }}
      sha256: ${{ steps.publish.outputs.sha256 }}
      junit-artifact-name: ${{ inputs.junit-artifact-name }}
      kosli-pipeline: ${{ inputs.kosli-pipeline }}
  snyk:
    uses: stacc/github-workflow-actions/.github/workflows/snyk.yaml@main
    with:
      name: ${{ steps.publish.outputs.name }}
      sha256: ${{ steps.publish.outputs.sha256 }}
      kosli-pipeline: ${{ inputs.kosli-pipeline }}
      snyk-org: ${{ inputs.snyk-org }}
  approval:
    needs: [publish, pull-request, snyk, test]
    if: inputs.auto-approve == 'true'
    uses: stacc/github-workflow-actions/.github/workflows/reusable_report-approval.yaml@main
    with:
      name: ${{ steps.publish.outputs.name }}
      sha256: ${{ steps.publish.outputs.sha256 }}
      kosli-pipeline: ${{ inputs.kosli-pipeline }}

  update-latest:
    needs: approval
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Mark latest release as using git branch
        run: git branch --force ${{inputs.latest-branch}} ${{ github.sha }} && git push origin ${{inputs.latest-branch}}
